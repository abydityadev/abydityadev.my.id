{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"@contentlayer/source-files\";\r\nimport readingTime from 'reading-time'\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n    name: \"Post\",\r\n    filePathPattern: `**/*.mdx`,\r\n    contentType: \"mdx\",\r\n    fields: {\r\n        title: { type: \"string\", required: true },\r\n        date: { type: \"date\", required: true },\r\n        tags: {\r\n            type: 'list',\r\n            of: { type: 'string' },\r\n        },\r\n    },\r\n    computedFields: {\r\n        url: {\r\n            type: \"string\",\r\n            resolve: (post) => `/thread/${post._raw.flattenedPath}`,\r\n        },\r\n        readTimeMinutes: {\r\n            type: 'number',\r\n            resolve: (doc) => calculateReadingTime(doc.body.raw)\r\n        }\r\n    },\r\n}));\r\n\r\nexport default makeSource({\r\n    contentDirPath: \"src/data/threads\",\r\n    documentTypes: [Post],\r\n    mdx: {\r\n        remarkPlugins: [],\r\n        rehypePlugins: [],\r\n    },\r\n});\r\n\r\nexport const calculateReadingTime = (text: any) => {\r\n    // Step 2: Determine the average reading speed (words per minute)\r\n    const wordsPerMinute = 200;\r\n    // Step 3: Calculate the word count\r\n    const noOfWords = text.split(/\\s/g).length;\r\n    // Step 4: Calculate the estimated reading time (in minutes)\r\n    const minutes = noOfWords / wordsPerMinute;\r\n    const readTime = Math.ceil(minutes);\r\n    // Step 5: Format the output\r\n    return `${readTime}`;\r\n}"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAGxC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC1C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,MAAM;AAAA,MACF,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,WAAW,KAAK,KAAK,aAAa;AAAA,IACzD;AAAA,IACA,iBAAiB;AAAA,MACb,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,qBAAqB,IAAI,KAAK,GAAG;AAAA,IACvD;AAAA,EACJ;AACJ,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACD,eAAe,CAAC;AAAA,IAChB,eAAe,CAAC;AAAA,EACpB;AACJ,CAAC;AAEM,IAAM,uBAAuB,CAAC,SAAc;AAE/C,QAAM,iBAAiB;AAEvB,QAAM,YAAY,KAAK,MAAM,KAAK,EAAE;AAEpC,QAAM,UAAU,YAAY;AAC5B,QAAM,WAAW,KAAK,KAAK,OAAO;AAElC,SAAO,GAAG,QAAQ;AACtB;",
  "names": []
}
